# Base code borrowed from AOT
namespace = planet_destruction

# Nanobot Assimilation
planet_event = {
	id = planet_destruction.500
	hide_window = yes

	is_triggered_only = yes

	immediate = { # remove hive mind?
		from.owner = { country_event = { id = planet_destruction.501 } }
		
		if = {
			limit = {
				OR = {
					is_active_resolution = "resolution_rulesofwar_independent_tribunals"
					is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
					is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
				}
			}
			from.owner = {
				set_timed_country_flag = {
					flag = resolution_breached_fired_assimilator
					days = 3600
				}
			}
		}
		if = {
			limit = {
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
					is_playable_country = yes
				}
			}
			# Generate threat
			add_threat = { who = from.owner amount = 3 }
			# modifier for allies + those upset by robots
			every_country = {
				limit = {
					NOR = {
						is_same_value = from.owner
						is_same_value = root.owner
						AND = {
							has_federation = yes
							is_in_federation_with = from.owner
						}
					}
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						AND = {
							has_federation = yes
							is_in_federation_with = root.owner
						}
						has_ai_personality = awakened_fallen_empire_spiritualist
						AND = {
							is_playable_country = yes
							OR = {
								is_egalitarian = yes
								is_spiritualist = yes
							}
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_assimilated_a_world
					who = from.owner
				}
			}
			# modifiers for victim
			owner = {
				add_opinion_modifier = {
					modifier = opinion_assimilated_my_world
					who = from.owner
				}
				if = {
					limit = { NOT = { is_gestalt = yes } }
					add_modifier = {
						modifier = colossus_victim
						days = 10800 # 30 years
					}
				}
			}
		}
		else_if = {
			limit = {
				exists = owner
				owner = { is_country_type = primitive }
			}
			# modifier for allies + those upset by genocide
			every_country = {
				limit = {
					NOR = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					is_playable_country = yes
					NOR = {
						is_xenophobe = yes
						is_homicidal = yes
						is_xenophile = yes
					}
				}
				add_opinion_modifier = {
					modifier = opinion_assimilated_a_primitive_world
					who = from.owner
				}
			}
			every_country = {
				limit = {
					NOR = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						has_ai_personality = awakened_fallen_empire_xenophile
						AND = {
							is_playable_country = yes
							is_xenophile = yes
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_assimilated_a_primitive_world_phile
					who = from.owner
				}
			}
		}
		# Add war exhaustion to planet owner
		owner = {
			if = {
				limit = { #isn't the case when the crisis bombards planets, for instance
					is_at_war_with = from.fleet.owner
				}
				add_static_war_exhaustion = {
					attacker = from.fleet.owner
					location = root
					value_for_planet_destruction = 1.0
				}
			}
		}
		if = {
			limit = {
				exists = owner
				owner = { is_same_value = from.owner }
			}
			# already owned
		}
		else = {
			set_owner = from.owner
		}
		# every_owned_pop = {
		# 	limit = {
		# 		is_valid_pop_for_PLANET_KILLER_NANOBOTS = yes
		# 	}
		# 	modify_species = {
		# 		species = this
		# 		add_trait = trait_cybernetic
		# 		add_traits_at_start_of_list = yes
		# 		change_scoped_species = yes
		# 	}
		# }

		# to stop scope confuse while coding
		from.owner = { save_event_target_as = anz_owener_quickref }
		
		# Custom assimilation code
		every_owned_pop = {
			if = { # Machine
				limit = {
					is_mechanical_species = yes
					has_trait = trait_machine_unit
				}
				if = {
					limit = {
						event_target:anz_owener_quickref = {
							anz_spr_repsi = yes
						}
						NOT = { has_trait = trait_psionic }
					}
					modify_species = {
						species = this
						add_trait = trait_psionic
						remove_trait = trait_latent_psionic
					}
				}
			} else_if = { # Robot
				limit = {
					is_mechanical_species = yes
					has_trait = trait_mechanical
				}
				species = {
					save_event_target_as = anz_asim_origin
				}
				random_galaxy_species = {
					limit = { has_species_flag = anz_asim_spc_mech@event_target:anz_asim_origin }
					event_target:anz_owener_quickref = { set_country_flag = anz_asim_spc_mech_found@event_target:anz_asim_origin }
					save_event_target_as = anz_asim_target
				}
				if = {
					limit = { event_target:anz_owener_quickref = { NOT = { has_country_flag = anz_asim_spc_mech_found@event_target:anz_asim_origin } } }
					event_target:anz_asim_origin = {
						create_species = {
							is_mod = yes
							name = this
							plural = this
							adjective = this
							name_list = this
							class = MACHINE
							portrait = this
							homeworld = this
							traits = { trait = trait_machine_unit }
							effect = {
								set_species_flag = anz_asim_spc_mech@event_target:anz_asim_origin
								save_event_target_as = anz_asim_target
							}
						}
						set_species_flag = anz_asim_spc_synth@event_target:anz_asim_target
					}
				} else = {
					event_target:anz_owener_quickref = { remove_country_flag = anz_asim_spc_mech_found@event_target:anz_asim_origin }
				}

				change_species = event_target:anz_asim_target

				if = { # need psi
					limit = { event_target:anz_owener_quickref = { anz_spr_repsi = yes } }
					modify_species = {
						species = this
						add_trait = trait_psionic
						add_traits_at_start_of_list = yes
						change_scoped_species = yes
					}
				}
			} else_if = { # Hive
				limit = {
					is_organic_species = yes
					has_trait = trait_hive_mind
				}
				if = {
					limit = {
						event_target:anz_owener_quickref = {
							anz_spr_dehive = no
						}
					}
					kill_pop = yes
				} else_if = {
					limit = {
						event_target:anz_owener_quickref = {
							anz_spr_dehive = yes
							anz_spr_repsi = no
						}
					}
					modify_species = {
						species = this
						remove_trait = trait_hive_mind
						remove_trait = trait_psionic
						remove_trait = trait_latent_psionic
						add_trait = trait_cybernetic
						add_traits_at_start_of_list = yes
						change_scoped_species = yes
					}
				} else_if = {
					limit = {
						event_target:anz_owener_quickref = {
							anz_spr_dehive = yes
							anz_spr_repsi = yes
						}
					}
					modify_species = {
						species = this
						remove_trait = trait_hive_mind
						remove_trait = trait_latent_psionic
						add_trait = trait_psionic
						add_trait = trait_cybernetic
						add_traits_at_start_of_list = yes
						change_scoped_species = yes
					}
				}
			} else_if = { # Organic
				limit = {
					is_organic_species = yes
					NOT = { has_trait = trait_hive_mind }
				}
				if = {
					limit = {
						event_target:anz_owener_quickref = {
							anz_spr_repsi = no
						}
					}
					modify_species = {
						species = this
						remove_trait = trait_psionic
						remove_trait = trait_latent_psionic
						add_trait = trait_cybernetic
						add_traits_at_start_of_list = yes
						change_scoped_species = yes
					}
				} else = {
					modify_species = {
						species = this
						remove_trait = trait_latent_psionic
						add_trait = trait_psionic
						add_trait = trait_cybernetic
						add_traits_at_start_of_list = yes
						change_scoped_species = yes
					}
				}
			}

			event_target:anz_owener_quickref = {
				anz_asim_post_effects_country_scope = yes
			}
		}

		# every_owned_pop = {
		# 	limit = {
		# 		OR = {
		# 			has_trait = trait_hive_mind
		# 			has_trait = trait_mechanical
		# 			has_trait = trait_machine_unit
		# 		}
		# 	}
		# 	kill_pop = yes
		# }
		every_owned_pop = {
			limit = {
				has_modifier = pop_recently_conquered
			}
			remove_modifier = pop_recently_conquered
		}
		every_owned_pop = {
			set_citizenship_type = {
				type = citizenship_full_machine
				cooldown = yes
			}
		}
		# Special graphics for Habitats and Ring Worlds
		if = {
			limit = {
				is_memeable_space_habitat = yes
			}
			spawn_habitat_nanobot_effect = yes
		}
		else_if = {
			limit = {
				is_memeable_ringworld = yes
			}
			spawn_ringworld_nanobot_effect = yes
		}
		else = {
			change_pc = this
		}
	}
}
# Used to overwrite Merger of Rules

#Root = planet
#This = species
species_can_live_on_planet = {
	exists = root
	NAND = {
		root = { merg_is_machine_world = yes }
		NOR = {
			has_trait = trait_machine_unit
			has_trait = trait_mechanical
			# Ethics and Civics Bug Branch
			is_bugged_happy_machine = yes
			# FCSS
			AND = {
				merg_has_fcss = yes
				has_trait = trait_cybernetic
			}
			# Vanilla
			AND = {
				has_trait = trait_cybernetic
				exists = root.owner
				root.owner = {
					is_machine_empire = yes
					OR = {
						has_civic = civic_machine_assimilator
						has_ascension_perk = ap_mechromancy
						# Ethical Gestalts
						has_ascension_perk = ap_gestaltization
					}
				}
			}
			# Girls Frontline
			has_trait = GF_trait_doll
		}
	}
	# Vanilla
	if = {
		limit = { root = { merg_is_hive_world = yes } }
		OR = {
			merg_has_hive_trait = yes
			AND = {
				#Necrophage Hive Mind can have Necrophytes
				exists = root.owner
				root.owner = {
					is_hive_empire = yes
					OR = {
						has_origin = origin_necrophage
						# Decision Origins
						has_country_flag = decision_necrophage
					}
					prev = { species_can_be_necrophaged = yes }
				}
			}
		}
	}
	# Planetary Population Restrictions
	custom_tooltip = {
		fail_text = RESIDENT_LIVING_RESTRICTED
		has_policy_residentliving_restricted = yes
	}
	custom_tooltip = {
		fail_text = SLAVE_LIVING_RESTRICTED
		has_policy_slaveliving_restricted = yes
	}
	# TimeMod
	TIME_RULE_trgr_spcs_CAN_live_on_planet = yes
}

# Added Global Pop Limit

# Checks if a pop can procreate
# This = Species
# Root = Planet
can_species_procreate = {
	is_sapient = yes
	NOR = {
		has_trait = trait_machine_unit
		has_trait = trait_mechanical
		# Ethics and Civics Bug Branch
		is_bugged_happy_machine = yes
		AND = {
			is_exp_clone = yes
			root = {
				owner = {
					OR = {
						has_country_flag = clone_infertility_5
						AND = {
							NOT = { has_origin = origin_clones }
							years_passed > 200
						}
					}
				}
			}
		}
		AND = {
			root = { owner = { has_origin = origin_hive_queen } }
			has_trait = trait_hive_mind
		}
		# Diagraphers Trait Mod
		is_dimorphic_male = yes
		# Expanded Events
		is_exp_memorex_comatos = yes
		# Expanded Megastructures and Technology
		AND = {
			has_global_flag = expanded_megastructures_installed
			is_exp_clone = yes
			root = {
				owner = {
					OR = {
						has_country_flag = clone_infertility_5
						AND = {
							NOT = { has_origin = origin_clones }
							years_passed > 200
						}
					}
				}
			}
		}

		# Girls Frontline
		has_trait = GF_trait_doll
		# Holofrixit Revisited / Silfae's Portraits: Revisited
		has_species_trait_hologanglion = yes
		# Lithoid Supremacy
		is_pearl_born_drone = yes
		# Madoka Magica NEW
		has_trait = trait_mahoshoujo
		# Plentiful Traditions - Extra Perks
		has_trait = trait_plentiful_traditions_pt_cocoon
			# Wandering Witch: Voyagers
		has_trait = trait_dummy
	}
	OR = {
		has_ethical_gestalts = no
		AND = {
			has_ethical_gestalts = yes
			OR = {
				NOT = { has_trait = trait_hive_mind }
				has_citizenship_type = { type = citizenship_full country = root.owner }
				AND = {
					exists = root.branch_office_owner
					has_citizenship_type = { type = citizenship_full country = root.branch_office_owner }
					root.branch_office_owner = {
						NOT = { has_relation_flag = { who = root.owner flag = no_pop_growth_treaty } }
					}
				}
			}
		}
	}
	NAND = {
		root = { has_modifier = slave_colony }
		NOT = { has_citizenship_type = { type = citizenship_slavery country = root.owner } }
		# Special Colonies Overhaul
		AND = {
			merg_has_special_colonies = yes
			NOT = {
				root = {
					owner = {
						or = {
							has_valid_civic = civic_slaver_guilds
							has_valid_civic = civic_indentured_assets
						}
					}
				}
			}
		}
	}
	# Diagraphers Trait Mod
	NAND = {
		has_exotic_gas_dependency = yes
		exists = root.owner
		root.owner = { resource_stockpile_compare = { resource = exotic_gases value <= 0 } }
	}
	NAND = {
		diag_is_delicate = yes
		exists = root.owner
		has_citizenship_type = { type = citizenship_slavery country = root.owner }
	}
	NAND = {
		diag_is_sterile = yes
		exists = root.owner
		root.owner = { 	has_artificial_wombs = no }
	}
	# Expanded Pops
	if = {
		limit = { is_exp_tree_caretaker = yes }
		root = {
			OR = {
				has_deposit = d_tree_of_life_colony
				has_deposit = d_tree_of_life_home
			}
		}
	}
	# Planetary Population Restrictions
	policies_allow_breeding = yes
	# V_Traits
	if = {
		limit = { has_v_difficult_reproduction = yes }
		root = { habitability = { who = this value >= 0.8 } }
	}
	if = { 
		limit = { has_v_heterogamous_reproduction = yes }
		root = { habitability = { who = this value <= 0.8 } }
	}
	if = {
		limit = { has_v_embryonic_diapause = yes }
		root = { NOT = { has_v_diapause_modifier = yes } }
	}
	if = {
		limit = { is_v_symbiont_a = yes }
		root = { check_variable = { which = v_num_symbiont value <= 0 } }
	}
	if = {
		limit = { is_v_symbiont_b = yes }
		root = { check_variable = { which = v_num_symbiont value >= 0 } }
	}
	# Wandering Witch: Voyagers
	if = {
		limit = { has_trait = trait_reanimated_materials }
		OR = {
			is_mage = yes
			root.owner = {
				has_country_flag = syn_witch
			}
			root = {
				NOR = { # make sure elaina always grow first
					has_building = building_possibility_portal
					has_building = building_dimensional_instrument
					has_deposit = d_mysterious_portal
				}
			}
			root = {
				num_assigned_jobs = { job = matter_reanimator value > 0 }
				NOR = { # make sure elaina always grow first
					has_building = building_possibility_portal
					has_building = building_dimensional_instrument
					has_deposit = d_mysterious_portal
				}
			}
		}
	}
	if = {
		limit = { has_trait = trait_houki }
		root.owner = {
			has_country_flag = newbirth_houki
			NOT = { has_country_flag = max_houki_number_reached }
		}
	}
	if = {
		limit = { 
			OR = {
				has_trait = trait_witch
				has_trait = trait_victorika
				has_trait = trait_elaina_descendant
			}
		}
		OR = {
			root.owner = {
				has_ascension_perk = ap_xeno_compatibility
			}
			root = {
				OR = {
					has_building = building_possibility_portal
					has_building = building_dimensional_instrument
					has_deposit = d_mysterious_portal
				}
			}
		}
	}
	# Vanilla
	NOT = { has_species_flag = nivlac_no_procreation }
	if = {
		limit = { has_trait = trait_necrophage }
		NOT = {
			root = {
				any_owned_species = {
					has_population_control = { country = root.owner type = no }
					species_can_be_necrophaged = yes
				}
			}
		}
	}
	# Global pop limit
	root = {
		owner = {
			OR = {
				AND = {
					is_ai = no
					num_pops < event_target:global_event_country.anz_ee_gplplayer
				}
				AND = {
					is_ai = yes
					num_pops < event_target:global_event_country.anz_ee_gplai
				}
			}
		}
	}
}

# Added ANZ EE - Expanded Gestalts

# Checks if a pop can be assembled
# This = Species
# Root = Planet
can_species_be_assembled = {
	is_sapient = yes
	# Holofrixit Revisited / Silfae's Portraits: Revisited
	has_species_trait_holodrone = no
	# Kancolle
	root.owner = { NOT = { has_modifier = modifier_ban_assemble } }
	# Vanilla
	OR = {
		# Robots
		AND = {
			is_robotic = yes
			# Azur lane Stellaris DLC
			NOT = { has_trait = trait_robot_mind_relic_core }
			# Animated Synthetics Portraits Expanded: Reborn
			OR = {
				merg_has_animated_synth = no
				AND = {
					merg_has_animated_synth = yes
					if = { #synth can never be built unless empire is a synth empire
						limit = { root.owner = { has_country_flag = synthetic_empire } }
						is_extsynth_synthetic = yes
					}
				}
			}
			# Diagraphers Trait Mod
			NAND = {
				robot_has_rare_crystal_comp = yes
				exists = root.owner
				root.owner = {
					resource_stockpile_compare = {
						resource = rare_crystals
						value <= 0
					}
				}
			}
			# Girls Frontline
			if = {
				limit = { has_trait = GF_trait_doll }
				root.owner = { GF_can_build_doll_species = yes }
			}
			# Wandering Witch
			if = { limit = { has_trait = trait_dummy }
				if = { limit = { root.owner = { has_origin = origin_garbage_princesses } }
					root = { 
						OR = {
							has_building = building_enigmatic_assembly_plant
							num_assigned_jobs = { job = dummicist value > 0 }
						}
						check_modifier_value = { modifier = planet_pop_assembly_add value > 0 }
					}
				}
				else = {
					root.owner = { has_technology = tech_dummy_workers }
					root = { num_assigned_jobs = { job = dummicist value > 0 } }
					root = { check_modifier_value = { modifier = planet_pop_assembly_add value > 0 } }
				}
			}
			# Voyage to Eternity
			KZ_VOY_trgr_plnt_ASSEMBLY = yes
			if = { limit = { has_trait = trait_KZ_VOY_magic_puppet }
				KZ_VOY_can_assemble_magic_puppet = yes
			}
			# Vanilla
			root = {
				check_modifier_value = {
					modifier = planet_pop_assembly_add
					value > 0
				}
				owner = {
					NOR = {
						# Azur lane Stellaris DLC
						has_authority = auth_azur_lane_1
						has_authority = auth_azur_lane_2
						has_authority = auth_azur_lane_K
						# Civic: Organic Zealots
						AND = {
							has_policy_flag = robots_outlawed
							is_robot_empire = no
						}
						has_country_flag = lost_robot_policy_war
						is_valid_organic_zealots = yes
						AND = {
							is_subject = yes
							exists = overlord
							overlord = { is_valid_organic_zealots = yes }
						}
						# Sirens
						has_authority = auth_siren_group
					}
				}
			}
		}
		# Organics
		AND = {
			is_organic_species = yes
			# Civic: Organic Zealots
			root = {
				check_modifier_value = {
					modifier = planet_pop_assembly_organic_add
					value > 0
				}
				owner = {
					NAND = {
						has_trait = trait_cybernetic
						OR = {
							has_country_flag = lost_robot_policy_war
							is_valid_organic_zealots = yes
							AND = {
								is_subject = yes
								exists = overlord
								overlord = { is_valid_organic_zealots = yes }
							}
						}
					}
				}
			}
			# Hives can only clone drones
			if = {
				limit = { root.owner = { is_hive_empire = yes } }
				AND = {
					OR = {
						has_trait = trait_hive_mind
						# Ethics and Civics - Bug Branch
						is_bugged_happy_drone = yes
					}
					# ANZ EE - Expanded Gestalts
					NOT = { has_trait = trait_hive_mind_overlord }
				}
			}
			# Expanded Traits, Civics, Pops, and More
			else_if = {
				limit = {
					root = {
						owner = { has_origin = origin_sacred_tree }
						OR = {
							has_deposit = d_tree_of_life_home
							has_deposit = d_tree_of_life_colony
						}
					}
				}
				OR = {
					is_exp_tree_caretaker = yes
					root = {
						OR = {
							merg_has_cloning_building = yes
							has_modifier = tiyanki_trophy
							owner = { has_modifier = syamelles_curse }
							AND = {
								has_building = building_posthumous_employment_center
								owner = { has_civic = civic_permanent_employment }
							}
							has_planet_flag = can_organic_assemble_flag #for mod compatibility
						}
					}
				}
			}
			# flourishing plantoids
			else_if = {
				limit = { has_budding_trait = yes }
				root = { any_owned_species = { is_exact_same_species = prevprev } }
			}
			else_if = {
				limit = { has_trait = trait_tiyanki }
				root = {
					any_owned_species = { is_exact_same_species = prevprev }
				}
			}
			else_if = {
				limit = {
					root.owner = {
						has_tradition = tr_cybernetics_assembly_standards
						has_policy_flag = roboticist_output_build_cyborgs
					}
				}
				has_trait = trait_cybernetic
			}
			# Lithoid supremacy
			else_if = {
				limit = { 
					OR = {
						is_pearl_born_drone = yes 
						is_pearl_born_royal = yes
					}
				} 
				root = {
					any_owned_species = { 
						OR = {
							is_pearl_born_drone = yes 
							is_pearl_born_royal = yes
						}
					}
				}
			}
			# Clone army
			else_if = {
				limit = {
					OR = {
						has_trait = trait_clone_soldier_infertile
						has_trait = trait_clone_soldier_infertile_full_potential
					}
				}
				root = {
					# Event 'clones.3' should cover this, but extra safety check.
					merg_has_clone_army_building = yes
					NOT = { check_variable = { which = clone_pops_missing value = 0 } }
				}
			}
			# Plentiful Traditions - Extra Perks
			else_if = {
				limit = { root.owner = { has_ascension_perk = ap_total_assimilation } }
				has_trait = trait_plentiful_traditions_pt_cocoon
			}
			# Nirvana Empire Project
			else_if = {
				limit = {
					root.owner = {
						OR = {
							has_valid_civic = civic_nirvana_empire_dragon
							has_valid_civic = civic_nirvana_empire_council
						}
					}
					is_same_species = root.owner
				}
				root = { check_modifier_value = { modifier = planet_pop_assembly_organic_add value > 0 } }
			}
			# Planetary Diversity
			else_if = {
				limit = { is_organic_fourschildren = yes }
				root = {
					has_building = building_techno_04_clone_vat
					NOT = { check_variable = { which = techno_pops_missing value = 0 }
					}
				}
			}
			# V_TRAITS
			else_if = {
				limit = { has_v_asexual_reproduction = yes }
				root = {
					any_owned_species = { is_exact_same_species = prevprev }
				}
			}
			else_if = {
				limit = { has_v_heterogamous_reproduction = yes }
				root = {
					any_owned_species = { is_exact_same_species = prevprev }
					habitability = { who = this value >= 0.6 }
				}
			}
			# Wandering Witch: Voyagers
			else_if = {
				limit = { 
					OR = {
						has_trait = trait_houki 
						has_trait = trait_reanimated_materials
					}
				}
				root = {
					OR = {
						num_assigned_jobs = { job = matter_reanimator value > 0 }
						merg_has_cloning_building = yes
						has_building = building_dimensional_instrument
					}
				}
				if = {
					limit = { has_trait = trait_houki }
					root.owner = {
						has_country_flag = newbirth_houki
						NOT = { has_country_flag = max_houki_number_reached }
					}
				}
			}
			else_if = { # for Familiars
				limit = { has_trait = trait_servitude }
				root = {
					OR = {
						merg_has_cloning_building = yes
						has_building = building_familiar_clone_vat
					}
				}
			}
			else_if = { # for Familiars
				limit = { has_trait = trait_reanimated_materials }
				root = {
					OR = {
						has_building = building_object_converter
						has_building = building_object_converter_2
					}
				}
			}
			# ANZ Advanced Cloning
			else_if = { # Cyborg Origin
				limit = {
					root.owner = { has_origin = origin_anz_cyborgs_collective }
					root = { has_building = building_anz_cc_mainframe }
				}
				is_same_species = root.owner.owner_main_species
			}
			# Vanilla
			else = {
				OR = {
					# Assault Lily
					is_archetype = LILY
					# EDA
					is_archetype = Areta
					# Eternal Empire
					is_archetype = ASCENDED
					# Kancolle
					is_archetype = KANMUSU
					# KDC Story Pack
					is_archetype = NANITES_CROP
					# Star Wars: UnknownWorld Shipgirls Story
					is_archetype = STARSHIPGIRLS
					# The DAL Species Mod
					is_archetype = DATEALIVE
					# Warship Girls R and MIST species
					is_archetype = WARSHIPGIRL
					is_archetype = SHENHAI
					is_archetype = UNITED_FLEET
					root = {
						OR = {
							# Vanilla
							AND = {
								merg_has_diag_rtp_mod = no
								merg_has_cloning_building = yes
							}
							AND = {
								merg_has_diag_rtp_mod = yes
								merg_has_cloning_building = yes
								any_owned_species = {
									is_same_species = prevprev
									NOT = { is_exact_same_species = prevprev }
								}
							}
							has_modifier = tiyanki_trophy
							owner = { has_modifier = syamelles_curse }
							AND = {
								has_building = building_posthumous_employment_center
								owner = { has_civic = civic_permanent_employment }
							}
							has_planet_flag = can_organic_assemble_flag #for mod compatibility
							# Omega's Stellaris Additions
							AND = {
								merg_has_omega_add = yes
								merg_has_hospital = yes
							}
						}
						# ANZ Advanced Cloning
						NOT = { has_modifier = planet_cloning_limits }
					}
				}
			}
			# Special Colonies Overhaul
			NAND = {
				merg_has_special_colonies = yes
				root = { has_modifier = slave_colony }
				NOT = { has_citizenship_type = { type = citizenship_slavery country = root.owner } }
				not = {
					root = {
						owner = {
							or = {
								has_valid_civic = civic_slaver_guilds
								has_valid_civic = civic_indentured_assets
							}
						}
					}
				}
			}
		}
		# Azur lane Stellaris DLC
		AND = {
			is_KANSEN_species = yes
			root = { check_modifier_value = { modifier = planet_pop_assembly_organic_add value > 0 } }
		}
		# Sirens
		AND = {
			is_SIREN_species = yes
			root = { check_modifier_value = { modifier = planet_pop_assembly_organic_add value > 0 } }
		}
		# Steven Universe Homeworld Gems
		# has_trait = trait_geoloid
		# Voyage to Eternity
		KZ_VOY_trgr_plnt_CLONE = yes
	}
	# Voyage to Eternity
	if = {
		limit = { 
			OR = {
				has_trait = trait_KZ_VOY_sub_terran_dragon
				has_trait = trait_KZ_VOY_sub_terran_dragon_SP
			}
		}
		KZ_VOY_trgr_plnt_CLONE = yes
	}
	# TimeMod
	is_tm_reassembler = no
	# Vanilla
	has_population_control = { country = root.owner type = no }
	# Global pop limit
	root = {
		owner = {
			OR = {
				AND = {
					is_ai = no
					num_pops < event_target:global_event_country.anz_ee_gplplayer
				}
				AND = {
					is_ai = yes
					num_pops < event_target:global_event_country.anz_ee_gplai
				}
			}
		}
	}
}

#Root = planet
#This = species
species_can_live_on_planet = {
	exists = root
	if = {
		limit = { root = { merg_is_machine_world = yes } }
		OR = {
			has_trait = trait_machine_unit
			has_trait = trait_mechanical
			has_trait = trait_pc_machine_preference
			# Ethics and Civics Bug Branch
			is_bugged_happy_machine = yes
			# FCSS
			AND = {
				merg_has_fcss = yes
				has_trait = trait_cybernetic
			}
			# Vanilla
			AND = {
				has_trait = trait_cybernetic
				exists = root.owner
				root.owner = {
					is_machine_empire = yes
					OR = {
						has_civic = civic_machine_assimilator
						has_ascension_perk = ap_mechromancy
						# Ethical Gestalts
						has_ascension_perk = ap_gestaltization
					}
				}
			}
			# Girls Frontline
			has_trait = GF_trait_doll
		}
	}
	else_if = {
		limit = { root = { merg_is_hive_world = yes } }
		OR = {
			merg_has_hive_trait = yes
			AND = {
				#Necrophage Hive Mind can have Necrophytes
				exists = root.owner
				root.owner = {
					is_hive_empire = yes
					OR = {
						has_origin = origin_necrophage
						# Decision Origins
						has_country_flag = decision_necrophage
					}
					prev = { species_can_be_necrophaged = yes }
				}
			}
		}
	} else = {
		always = yes
	}
	# Planetary Population Restrictions
	custom_tooltip = {
		fail_text = RESIDENT_LIVING_RESTRICTED
		has_policy_residentliving_restricted = yes
	}
	custom_tooltip = {
		fail_text = SLAVE_LIVING_RESTRICTED
		has_policy_slaveliving_restricted = yes
	}
	# TimeMod
	TIME_RULE_trgr_spcs_CAN_live_on_planet = yes
}

# Absolute memery, modified to check for anz flags
# this = country
can_country_change_councilors = {
	OR = {
		is_gestalt = no
		has_country_flag = anz_gestalt_council_unlocked
	}
}

#This = leader
should_pay_for_leader_upkeep = {
	NOR = {
		AND = {
			exists = owner
			owner = {
				is_gestalt = yes
				NOT = { has_country_flag = anz_gestalt_council }
			}
			is_councilor = yes
		}
		has_trait = leader_trait_spacebender
		has_leader_flag = should_not_have_upkeep
	}
	NOR = {
		has_leader_flag = marauder_merc_leader
		has_leader_flag = hired_admiral_merc_leader
	}
}

# this = leader
can_leader_get_council_trait = {
	if = {
		limit = { exists = owner owner = { has_country_flag = anz_gestalt_council } }
		AND = {
			exists = owner
			owner = {
				is_gestalt = yes
				has_country_flag = anz_gestalt_council
			}
			# has_non_council_subclass = no
		}
	} else = { # Vanilla
		OR = {
			NAND = {
				exists = owner
				owner = { is_gestalt = yes }
				is_councilor = no
			}
			has_leader_flag = restored_node
		}
	}
}

# this = leader
can_leader_get_normal_trait = {
	OR = {
		AND = {
			exists = owner
			owner = {
				is_gestalt = yes
				has_country_flag = anz_gestalt_council
			}
			# has_council_subclass = no
		}
		NOR = {
			AND = {
				exists = owner
				owner = { is_gestalt = yes }
				OR = {
					is_councilor = yes
					has_leader_flag = restored_node
				}
			}
			AND = {
				is_ruler = yes
				exists = owner
				owner = {
					OR = {
						has_authority = auth_dictatorial
						has_authority = auth_imperial
					}
				}
			}
		}
	}
}

# this = leader
can_leader_get_subclass_trait = {
	OR = {
		owner = { has_country_flag = anz_gestalt_council }
		NAND = {
			exists = owner
			owner = { is_gestalt = yes }
			OR = {
				is_councilor = yes
				has_leader_flag = restored_node
			}
		}
	}
	has_any_subclass = no
}

# this = leader
can_leader_get_destiny_trait = {
	OR = {
		owner = { has_country_flag = anz_gestalt_council }
		NAND = {
			exists = owner
			owner = { is_gestalt = yes }
		}
	}
}

# this = leader
should_count_towards_leader_cap = {
	NOR = {
		leader_class = envoy
		AND = {
			owner = { is_gestalt = yes }
			is_councilor = yes
			# We count all rulers as well
			NOT = {
				is_ruler = yes
				owner = { has_country_flag = anz_gestalt_council }
			}
		}
		is_hidden = yes
		has_leader_flag = marauder_merc_leader
		has_leader_flag = hired_admiral_merc_leader
		has_leader_flag = legendary_leader
		AND = {
			has_trait_tier1or2 = { TRAIT = leader_trait_eager }
			has_skill < 4
		}
		#Bug Branch
		AND = {
			has_trait = leader_trait_bugged_highborn
			has_skill > 9
		}
	}
}

# Added AI not allowed to bomb palush

#This rule is a condition for bombarding planets
#Root = fleet, potential attacker
#From = planet, potential target
can_orbital_bombard = {
	exists = from.OWNER

	# anz_ee
	if = {
		limit = { from = { has_planet_flag = paluushia } }
		owner = { is_ai = no }
	}

	# Diagrapher's Factions and Ethics Mod
	hidden_trigger = {
		OR = {
			merg_has_diag_fact = no
			root.owner = {
				NAND = {
					is_ai = yes
					has_civic = civic_warrior_culture
					is_spiritualist = yes
					NOR = {
						has_valid_civic = civic_barbaric_despoilers
						has_ascension_perk = ap_nihilistic_acquisition
						is_homicidal = yes
					}
				}
			}	
			from.owner = { is_crisis_faction = yes }
		}
	}
	# Vanilla
	NOR = {
		any_controlled_ship = { is_ship_size = colossus }
		# Real Space New Frontiers
		from = { is_planet_class = pc_hollow }
		# Star Wars: Kuat Ancient Empire
		FROM.OWNER = { is_country_type = kuat_fire_base_hositle }
		FROM = { has_planet_flag = enable_kuat_shield }
		# ACOT
		AND = {
			OWNER = { is_progenitor_empires = no }
			FROM = {
				OR = {
					is_acot_pmc_vault = yes
					is_acot_awesome_planet_class = yes
					is_sots_soulsphere = yes
				}
			}
		}
	}
	OR = {
		AND = {
			root.CONTROLLER = {
				NOT = { has_communications = from.OWNER }
			}
			from.CONTROLLER = {
				NOT = { is_country_type = primitive }
			}
		}
		AND = {
			root.CONTROLLER = {
				NOR = {
					has_policy_flag = interference_not_allowed
					has_policy_flag = interference_subtle
				}
			}
			from.CONTROLLER = { is_country_type = primitive }
		}
		# Origins of Civilization
		AND = {
			ROOT.CONTROLLER = {
				NOT = { has_policy_flag = ai_full_rights }
			}
			FROM.CONTROLLER = { is_country_type = vbp_machine }
		}
		# Vanilla
		ROOT.CONTROLLER = { is_hostile = FROM.CONTROLLER }
		root.CONTROLLER = { is_at_war_with = from.CONTROLLER }
		from = {
			OR = {
				is_planet_class = pc_infested
				# LEX
				has_planet_flag = bwm_ancestor_world
			}
		}
		from.CONTROLLER = {
			OR = {
				is_country_type = swarm
				is_country_type = ai_empire
				is_country_type = cybrex_empire
				AND = {
					is_country_type = awakened_marauders
					root.CONTROLLER = { is_hostile = prev }
				}
				has_country_flag = can_be_bombarded
				# Ancient Empire
				ag_can_be_orbital_bombardment_country = yes
				# ACOT
				is_country_type = sbtg_stellarborne_empire
				is_country_type = void_lifeforms_1
				is_country_type = void_lifeforms_2
				# Cruel Conquerers
				is_cruel_abomination_crisis = yes
				# Star Wars: Kuat Ancient Empire
				kuat_can_be_orbital_bombarment_country = yes
				# Gigastructural Engineering & More
				is_country_type = katzenartig_imperium
				is_country_type = compound_empire
				# LEX
				is_country_type = mem_ancestor_guardian
				# Scripted Triggers Undercoat
				has_country_flag = stu_bombardable_by_everyone
				# Solar Storm
				is_country_type = abyssal_host_invaders_type
				# Shroud Rising
				is_country_type = shroud_horrors
				is_country_type = shroud_cult
				# The Sleeper
				is_sleeper = yes
			}
		}
		root.CONTROLLER = {
			OR = {
				is_country_type = extradimensional
				is_country_type = extradimensional_2
				is_country_type = extradimensional_3
				is_country_type = swarm
				is_country_type = ai_empire
				# is_country_type = cybrex_empire - Ariphaos Patch - Should be governed by hostile rule
				is_country_type = dormant_marauders
				is_country_type = marauder_raiders
				is_country_type = ruined_marauders
				is_country_type = debt_collectors
				is_country_type = gray_goo
				is_country_type = vol
				AND = {
					is_country_type = awakened_marauders
					from.CONTROLLER = { is_hostile = prev }
				}
				is_khan_country_type = yes
				# Ancient Empire
				ag_can_do_orbital_bombardment_country = yes
				# ACOT
				is_progenitor_empires = yes
				is_country_type = void_lifeforms_1
				is_country_type = void_lifeforms_2
				# BlueArchive
				is_country_type = Aris_mid
				# Destiny: The Darkness Crisis
				is_country_type = darkness_country
				# Gigastructural Engineering & More
				is_country_type = katzenartig_imperium
				is_country_type = acot_crazed_stellarite
				is_country_type = compound_empire
				# History of the Lost Empire
				is_country_type = LsE_fallen_empire
				# LEX
				is_country_type = mem_ancestor_guardian
				# More Events Mod
				has_country_flag = mem_severance_harvesting_country
				# Scripted Triggers Undercoat
				has_country_flag = stu_can_bombard_everyone
				# Solar Storm
				is_country_type = abyssal_host_invaders_type
				# Shroud Rising
				is_country_type = shroud_horrors
				is_country_type = shroud_cult
				# Replicators
				is_country_type = replicators
				# Star Wars: Kuat Ancient Empire
				kuat_can_do_bombarment_country = yes
				# Star Wars: UnknownWorld Shipgirls Story
				is_country_type = afk_crisis_country
				# The Empty Vagrant
				is_country_type = default_ev
				# The Sleeper
				is_sleeper = yes
				# Warship Girls R And MIST Species
				is_country_type = wg_crisis_country
			}
		}
		AND = {
			from.controller = {
				is_country_type = faction
				NOT = { is_same_value = root.CONTROLLER }
			}
			from.owner = {
				is_same_value = root.CONTROLLER
			}
		}
		# More Events Mod
		AND = {
			exists = root.OWNER
			exists = from.CONTROLLER
			root.CONTROLLER = {
				OR = {
					is_country_type = mem_surveyor_country_red
					is_country_type = mem_vazurans
				}
			}
			from.CONTROLLER = { merg_is_default_empire = yes }
		}
		# The Empty Vagrant
		root.CONTROLLER = { is_country_type = ev_leviathans_crisis }
		# Eldar Revisited
		AND = {
			root.CONTROLLER = { is_country_type = shroud_spirits }
			from = { has_planet_flag = is_shroud_attack_planet_target }
		}
	}
}

# Added Starbase Comms Jammer blocks sensor

# this = system
# root = country
system_blocks_sensors = {
	# Vanilla, includes code from Ariphaos' Sensor Expansion
	OR = {
		# ANZ EE
		AND = {
			exists = starbase
			starbase = { has_starbase_building = communications_jammer }
			NAND = { # Don't block for self
				exists = owner
				owner = { is_same_empire = root }
			}
		}

		AND = { # Nebulae
			OR = {
				is_inside_nebula = yes
				has_modifier = space_storm
				has_modifier = zroni_storm
				merg_is_nebulae = yes
				# Wild Space
				is_ws_system = yes
				# Protoplanetary Disks
				is_star_class = sc_protostar
				is_star_class = sc_tt_red
				is_star_class = sc_tt_orange
				is_star_class = sc_tt_white
				is_star_class = sc_ae
			}
			ROOT = {
				NOR = {
					# Ariphaos Sensor Expansion
					has_technology = tech_ariphaos_sensors_nebula
					# Wild Space
					has_technology = tech_WS_sensors_nebula_1
				}
			}
		}
		AND = { # Clusters, Sealed systems
			OR = {
				has_star_flag = lcluster
				has_star_flag = sealed_system
				# Ariphaos Sensor Expansion
				has_star_flag = surveillance_supercomputer_system
			}
			# Making sure modded hidden systems will work as intended if Sensor Expansion is installed
			NOR = {
				# Warship Girls R And MIST Species
				has_star_flag = wg_sealed_system
				has_star_flag = wg_psionic_systems
				# Ancient Empire
				has_star_flag = ag_no_sensor_system
				# Solar Storm
				has_star_flag = ss_abyssal_shockwave
			}
			ROOT = { NOT = { has_technology = tech_ariphaos_sensors_sealed } }
		}
		# Warship Girls R And MIST Species
		has_star_flag = wg_sealed_system
		has_star_flag = wg_psionic_systems
		# Ancient Empire
		has_star_flag = ag_no_sensor_system
		# Solar Storm
		has_star_flag = ss_abyssal_shockwave
		# Sensor Expansion
		AND = { # Neutron stars
			OR = {
				merg_has_sensor_expansion = yes
				has_aso_space_exploration = yes
			}
			merg_is_neutron_star_class = yes
			ROOT = { NOT = { has_technology = tech_sensors_4 } }
		}
		AND = { # Pulsars
			OR = {
				merg_has_sensor_expansion = yes
				has_aso_space_exploration = yes
			}
			merg_is_pulsar_star_class = yes
			ROOT = { NOT = { has_technology = tech_ariphaos_sensors_pulsar } }
		}
		AND = { # Wormholes
			OR = {
				merg_has_sensor_expansion = yes
				merg_has_wild_space = yes
				has_aso_space_exploration = yes
			}
			has_natural_wormhole = yes
			ROOT = {
				NOR = {
					has_technology = tech_ariphaos_sensors_wormhole
					has_technology = tech_WS_sensors_wormhole
				}
			}
		}
		AND = { # Black and White Holes
			OR = {
				merg_has_sensor_expansion = yes
				has_aso_space_exploration = yes
			}
			merg_is_hole_star_class = yes
			ROOT = { NOT = { has_technology = tech_ariphaos_sensors_black_hole } }
		}
		AND = { # Jammer
			merg_has_sensor_expansion = yes
			exists = starbase
			starbase = { has_starbase_building = ariphaos_sensors_jammer_starbase }
			ROOT = { NOT = { has_technology = tech_ariphaos_sensors_jammed } }
		}
		# Assault Lily
		AND = {
			merg_has_assault_lily = yes
			exists = sector
			sector.sector_capital = {
				exists = leader
				leader = {
					OR = {
						has_trait = leader_trait_AL_Rareskill_governor_Uberzain
						has_trait = leader_trait_AL_Rareskill_governor_UberzainS
						has_trait = leader_trait_AL_Rareskill_governor_UberzainEX
					}
				}
			}
		}
		# Destiny: The Darkness Crisis
		has_star_flag = "black_fleet_in_system"
	}
}

# Assimilators can claim Systems and others can claim theirs

# Root = claimer
# This = system
can_add_claim = {
	hidden_trigger = {
		if = {
			limit = { root = { merg_is_default_empire = no } }
			always = yes
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_POLICY
		OR = {
			root = {
				has_policy_flag = unrestricted_wars
				# Expanded Traits, Civics, Pops, and More
				NOR = {
					has_valid_civic = civic_closed_collective
					has_valid_civic = civic_closed_network
				}
			}
			# Expanded Traits, Civics, Pops, and More
			AND = {
				root = {
					has_policy_flag = liberation_wars
					has_authority = auth_democratic
					has_valid_ai_personality = yes
					has_ai_personality = democratic_crusaders
				}
				exists = owner
				owner = {
					NOR = {
						has_authority = auth_democratic
						is_exp_cooperative = yes
					}
				}
			}
			AND = {
				root = { has_policy_flag = liberation_wars }
				exists = owner
				owner = { is_gestalt = yes }
			}
			# Vanilla
			AND = {
				exists = owner
				owner = { is_gestalt = yes }
			}
			AND = {
				exists = owner
				owner = {
					any_war = {
						any_attacker = { is_same_value = prevprev }
						any_defender = { is_same_value = root }
					}
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_NOT_VALID_EMPIRE
		NAND = {
			exists = owner
			owner = {
				NOR = {
					merg_is_default_empire = yes
					is_fallen_empire = yes
					# ACOT
					is_country_type = sbtg_stellarborne_empire_active
					is_country_type = sbtg_light_seeker
					# The Sleeper
					is_country_type = awakened_sleeper
					# Twinks Eternal Empire
					is_country_type = eternal_empire
					# ZOFE
					is_zofe_oe = yes
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_DEVOURING_SWARM
		NAND = {
			root = { has_valid_civic = civic_hive_devouring_swarm }
			root = { is_lithoid_empire = no }
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_DEVOURING_SWARM_LITHOID
		NAND = {
			root = { has_valid_civic = civic_hive_devouring_swarm }
			root = { is_lithoid_empire = yes }
		}
	}
	# anz_ee
	# custom_tooltip = {
	# 	fail_text = CANNOT_ADD_CLAIM_ASSIMILATOR
	# 	NOT = {
	# 		root = {
	# 			OR = {
	# 				has_valid_civic = civic_machine_assimilator
	# 				# Expanded Mods Base
	# 				has_valid_civic = civic_infestation
	# 				has_government = gov_parasitic_overmind
	# 				# Ethical Gestalts
	# 				has_valid_civic = civic_hive_assimilator
	# 			}
	# 		}
	# 	}
	# }
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_PURIFIERS
		NAND = {
			exists = owner
			root = { has_valid_civic = civic_fanatic_purifiers }
			NOT = { owner = { is_same_species = root } }
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_EXTERMINATOR
		NAND = {
			exists = owner
			root = { has_valid_civic = civic_machine_terminator }
			owner = {
				NOR = {
					is_same_species = root
					has_country_flag = synthetic_empire
					is_hive_empire = yes
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_THEY_THREAT
		NAND = {
			exists = owner
			owner = {
				OR = { # anz_ee
					is_homicidal = yes
					# has_valid_civic = civic_machine_assimilator
					# Ethical Gestalts
					# has_valid_civic = civic_hive_assimilator
					# Expanded Mods Base
					# has_government = gov_parasitic_overmind
				}
			}
			root = {
				NOR = { # anz_ee
					is_homicidal = yes
					# has_valid_civic = civic_machine_assimilator
					# Ethical Gestalts
					# has_valid_civic = civic_hive_assimilator
					# Expanded Mods Base
					# has_government = gov_parasitic_overmind
				}
			}
		}
	}
	# Reworked Advanced Ascension
	custom_tooltip = {
		fail_text = AAR_failtips_no_claim
		NOT = { root = { has_country_flag = AAR_flg_cntr_no_claim } }
	}
	# StarnetAI/StarTech
	custom_tooltip = {
        fail_text = CANNOT_ADD_CLAIM_NOT_VALID_EMPIRE
        NAND = {
            exists = owner
            root = { is_ai = yes }
            owner = {
                OR = {
                    merg_is_fallen_empire = yes
                    merg_is_awakened_fe = yes
                }
                relative_power = {
                    who = root
                    category = fleet
                    value >= equivalent
                }
            }
        }
    }
	# Ethical Gestalts
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_GESTALT_POLICY
		exists = owner
		OR = {
			has_ethical_gestalts = no
			AND = {
				has_ethical_gestalts = yes
				OR = {
					root = { has_policy_flag = hostile_all_gestalts }
					AND = {
						root = { has_policy_flag = gestalt_liberation }
						owner = { is_hive_empire = yes }
					}
					root = {
						has_policy_flag = gestalt_punishment
						relative_power = { who = prev.owner value < superior }			
					}
					AND = {
						NOT = { root = { has_policy_flag = no_wars } }
						owner = {
							any_owned_pop_species = {
								NOR = {
									has_trait = trait_hive_mind
									has_trait = trait_machine_unit
								}
							}
						}	
					}
				}
				# liberation wars policy allows claiming from unaligned hive minds with non-drone subjects.
				# gestalt control policy allows claiming from unaligned gestalts generally unless they're weak enough to subjugate instead
				owner = {
					is_gestalt = yes
					OR = {
						root = { has_policy_flag = hostile_all_gestalts }
						AND = {
							root = { has_policy_flag = gestalt_liberation }
							owner = { is_hive_empire = yes }
						}
						AND = {
							is_xenophile = no
							root = { is_xenophile = yes }
						}
						AND = {
							is_xenophobe = no
							root = { is_xenophobe = yes }
						}
						AND = {
							is_authoritarian = no
							root = { is_authoritarian = yes }
						}
						AND = {
							is_egalitarian = no
							root = { is_egalitarian = yes }
						}		
						AND = {
							is_spiritualist = no
							root = { is_spiritualist = yes }
						}		
						AND = {
							is_materialist = no
							root = { is_materialist = yes }
						}		
						AND = {
							is_militarist = no
							root = { is_militarist = yes }
						}		
						AND = {
							is_pacifist = no
							root = { is_pacifist = yes }
						}					
					}
				}
			}
		}
	}
	# gestalt containment policy prevents claiming a gestalt's capital system unless you can deassimilate its pops
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_CONTAINMENT_POLICY
		NAND = {
			root = {
				has_policy_flag = "enemy_gestalt_elimination_forbidden"
				NAND = {
					has_technology = tech_gene_tailoring
					root = { is_hive_empire = yes }
				}
			}
			OR = {
				owner = { is_hive_empire = yes }
				root = { has_policy_flag = ai_full_rights }
			}
			any_system_planet = {
				is_capital = yes
				owner = {
					is_gestalt = yes
					or = {
						is_playable = yes
						merg_is_fallen_empire = yes
					}
				}
			}	
		}
	}
	# Civic: Organic Zealots
	custom_tooltip = {
		fail_text = CANNOT_ADD_CLAIM_ORGANIC_ZEALOTS
		NAND = {
			root = { is_valid_organic_zealots = yes }
			exists = owner
			owner = {
				NOT = { is_same_species = root }
				is_robot_empire = yes
			}
		}
	}
	custom_tooltip = { # organic zealots don't need to claim system from other non-OZ homicidals
		fail_text = CANNOT_ADD_CLAIM_THEY_THREAT
		NAND = {
			exists = owner
			owner = {
				is_homicidal = yes
				is_valid_organic_zealots = no
			}
			root = { is_valid_organic_zealots = yes }
		}
	}
}

# Modified to block machine units from having hapiness (outside of bugged_happy_gestalts)

# Root = Species
# From = Country
# This = Species
species_has_happiness = {
	NOR = {
		AND = {
			has_trait = trait_machine_unit
			exists = FROM
			# FROM = { is_machine_empire = yes }
			# Ethics & Civics Bug Branch
			FROM = {  is_bugged_happy_gestalt = no }
		}
		AND = {
			has_trait = trait_hive_mind
			# Ethics & Civics Bug Branch
			FROM = { is_bugged_happy_gestalt = no }
		}
		can_think = no
		# Vanilla
		AND = {
			has_trait = trait_mechanical
			# Animated Synthetics Portraits Expanded: Reborn
			OR = {
				merg_has_animated_synth = no
				AND = {
					merg_has_animated_synth = yes
					FROM = { is_machine_empire = yes }
					is_extsynth_synthetic = yes
					NOT = { has_trait = trait_psionic }
				}
				AND = {
					merg_has_animated_synth = yes
					NAND = {
						FROM = { is_machine_empire = yes }
						is_extsynth_synthetic = yes
					}
				}
			}
			# Vanilla
			OR = {
				NOT = { exists = FROM }
				FROM = {
					OR = {
						is_machine_empire = yes
						NOR = {
							has_technology = tech_synthetic_workers
						}
						has_policy_flag = ai_outlawed
					}
				}
			}
		}
		AND = {
			has_trait = trait_cybernetic
			exists = FROM
			FROM = {
				OR = {
					AND = {
						is_machine_empire = yes
						has_civic = civic_machine_assimilator # Assimilator empire
					}
					AND = {
						is_democratic_authority = yes
						has_country_flag = cyber_collectivist
					}
				}
			}
		}
	}
}